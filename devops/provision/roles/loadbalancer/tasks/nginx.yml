---
- name: nginx | install build dependencies
  shell: apt-get install checkinstall libpcre3 libpcre3-dev libssl-dev zlib1g zlib1g-dbg zlib1g-dev -y
  tags: nginx

- name: nginx | install from source
  shell: |-
    wget http://nginx.org/download/nginx-1.8.0.tar.gz
    tar -xzf nginx-1.8.0.tar.gz
    cd nginx-1.8.0
    wget https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/1.2.6.tar.gz
    tar -xzf 1.2.6.tar.gz
    ./configure --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --conf-path=/etc/nginx/nginx.conf \
        --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --http-client-body-temp-path=/var/cache/nginx/client_temp \
        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
        --user=www-data \
        --group=www-data \
        --with-http_ssl_module \
        --with-http_realip_module \
        --with-http_addition_module \
        --with-http_sub_module \
        --with-http_dav_module \
        --with-http_flv_module \
        --with-http_mp4_module \
        --with-http_gunzip_module \
        --with-http_gzip_static_module \
        --with-http_random_index_module \
        --with-http_secure_link_module \
        --with-http_stub_status_module \
        --with-mail \
        --with-mail_ssl_module \
        --with-file-aio \
        --with-http_spdy_module \
        --with-cc-opt='-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' \
        --with-ld-opt='-Wl,-z,relro -Wl,--as-needed' \
        --with-ipv6 \
        --add-module=nginx-goodies-nginx-sticky-module-ng-c78b7dd79d0d
    make
    checkinstall --install=no -y
    mkdir -p /var/cache/nginx /tmp/nginx /etc/nginx/sites-enabled
  args:
    chdir: /usr/src
  tags: nginx

- name: nginx | add upstart script
  template: src=nginx-upstart.tpl dest=/etc/init/nginx.conf
  tags: nginx

- name: nginx | start
  service: name=nginx state=restarted
  tags: nginx

- name: nginx | add firewall exceptions
  shell: |-
      ufw allow 80
      ufw allow 443
  tags: nginx

- name: nginx | set configuration
  template: src=nginx.conf.tpl dest=/etc/nginx/nginx.conf
  tags: nginx

- name: nginx | ssl | ensure existence ssl directory
  file: path=/etc/ssl state=directory
  tags: nginx

- name: nginx | ssl | add ssl certificates / keys
  copy: src={{ item }} dest=/etc/ssl/{{ item | basename }} force=no
  with_fileglob:
    - '../../../ssl/*'
  tags: nginx

- name: nginx | disable default configuration
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: nginx | reload
  tags: nginx

- name: nginx | add maintenance website
  copy: src=partup-maintenance dest=/var/www
  tags: [nginx]

- name: nginx | add loadbalancer configuration
  template: src=nginx-vhost-{{ deploy_mode }}.tpl dest=/etc/nginx/sites-enabled/loadbalancer-{{ item.environment }}.conf
  with_items: loadbalancer.destinations
  when: deploy_environment == item.environment or deploy_environment == 'all'
  notify: nginx | reload
  tags: [nginx, nginx-mode]

- name: nginx | add beta redirect configuration
  template: src=nginx-vhost-partup-beta.tpl dest=/etc/nginx/sites-enabled/partup-beta-redirect.conf
  notify: nginx | reload
  tags: nginx

- name: nginx | wait for applications to be ready
  wait_for: host={{ hostvars[item]['ansible_eth1']['ipv4']['address'] }} port=3000
  with_items: groups['appservers-' + deploy_environment]
  when: deploy_mode != 'modulus'
  notify: nginx | reload
  tags: [nginx, nginx-mode]
